Git and GitHub
-----------------
Git :

Git is a Distributed version control System 

-> Local Version Control System : You can track files & rollback but if you loose your hardisk everything is lost

->Centralised VCS : data is dumped into centralised server but if anything happens to the server your data will be lost and the entire history of the project will be lost except whatever single snapshots people
happen to have on their local machines., Collaboration can be done

->Distributed VCS : everyone has a backup of complete repo and server has also complete data in case server is damaged we can set up again as full history or version is saved on all the computer using that repo

This is where Distributed Version Control Systems (DVCSs) step in. In a DVCS (such as Git, Mercurial,Bazaar or Darcs), clients donâ€™t just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history. Thus, if any server dies, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to
restore it. Every clone is really a full backup of all the data.

-------
Git Developed by :Linus Torvalds

--------
GitHUb :Hosting service to host git repository's

other services similar to git Hub are: big bucket ,git lab,...
---------
git features:
-> captures snapshot ,not differences

-> Almost every operation is local

->git has intigrity :checksum is used internally so that no one can temper with .git folder .

-> git generally adds data

-------

check git is installed or not : git --version


------------

first check if git is already working on that folder or not :

git status

if the above command shows fatel error than you can proceed with git init command to initialize , but if you get some other response like modification or working tree clean .... , then git is already running in that folder



-----------
To initialize git repo:
git init 

to check status :
git status

------------

git --help      ~to know which command does what

git push --help   ~to have a summary of what git push does and available options with git push


------------

Do configuration for git before commiting :

git config --global user.name "Harsh Vyas"

git config --global user.email "harshrajensravyas@gmail.com"

---------------

Config only for that repository

$ git config --local user.name "John Doe"
$ git config --local user.email "johndoe@example.com"

$ git config user.name "John Doe"
$ git config user.email "johndoe@example.com

It is a good practice to set the user name and email address in Git, as they are used to identify the author of commits in a Git repository. If you don't set this information, Git will use the system username and hostname as the default values.







to check :
git config --list
git config user.name
git config user.email 



-----------

to add files in staging area:

git add <file_name>
git add <first_file_name> <Second_file_name>
git add --a
git add --all
git add -A
git add .

----------

to commit changes :

first add all the files you want to commit then apply this command :

git commit -m "commit message"

git commit -a -m "Direct commit"                 ~ add + commit ~but only tracked file ,if you have untracked file as well then it will remain untracked 

git commit 

-> if you use git commit then vim edditer will open 
then press i
to write commit message then press esc
then write :wq
then press enter


git commit --amend        ~ change most recent commit message

---------

Changing the message of older or multiple commit messages

If you need to amend the message for multiple commits or an older commit, you can use interactive rebase, then force push to change the commit history.

On the command line, navigate to the repository that contains the commit you want to amend.

Use the git rebase -i HEAD~n command to display a list of the last n commits in your default text editor.

# Displays a list of the last 3 commits on the current branch
$ git rebase -i HEAD~3
The list will look similar to the following:

pick e499d89 Delete CNAME
pick 0c39034 Better README
pick f7fde4a Change the commit message but push the same commit.

# Rebase 9fdb3bd..f7fde4a onto 9fdb3bd
#
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like "squash", but discard this commit's log message
# x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
Replace pick with reword before each commit message you want to change.

pick e499d89 Delete CNAME
reword 0c39034 Better README
reword f7fde4a Change the commit message but push the same commit.
Save and close the commit list file.

In each resulting commit file, type the new commit message, save the file, and close it.

if you do changes commit message than all of them might not happen at the same time.so in that case . fire this command:

git rebase --edit-todo



When you're ready to push your changes to GitHub, use the push --force command to force push over the old commit.

$ git push --force origin EXAMPLE-BRANCH
------------
to know commit history:

git log

git log --oneline


git blame file.txt
To see who else has checked in specific files, you can use the "git blame" command. This command will show you the most recent commit that modified each line of the file and the author of that commit.

----------
to stop tracking and delete all tracking history ,basically this command deletes .git :

rm -rf .git

---------------

to clone repo :

git clone <http url>

git clone <http url> <name you want to give to your folder>

Note: if you didn't give any name then name of the repo will be by default ,the name of repo you are cloning from 
that is name mensioned just before .git in http url

-------------

To Ignore files :

touch .gitignore

now,write the name of the file you want git to ignore for ex:if you want to ignore h.log and b.py file then write this names in .gitignore file 
if you want git to ignore all the particular extension files then write *.extension
for ex: *.log     ~ This will ignore all the files having .log extension.

if you want to ignore folder for ex :
if you want to ignore a folder name 'dir' then write

dir/         in a git folder

all the files in that particular folder (dir) will be ignored.

althought blank folder is autometically ignored by git , it starts tracking it when you have something inside the folder


# ignore all .a files
*.a
# but do track lib.a, even though you're ignoring .a files above
!lib.a
# only ignore the TODO file in the current directory, not subdir/TODO
/TODO
# ignore all files in any directory named build
build/
# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt
# ignore all .pdf files in the doc/ directory and any of its subdirectories
doc/**/*.pdf




if you add already tracking file in .gitignore even then file will be tracked .if any modifications occurs in that file even then git keep tracking . if you want to stop git from tracking that file than you have to explicitely say to git to stop tracking :

git rm --cached <file_name>


---------
To delete a file after it has been committed but still keep it available for editing, use the command git rm --cached <file_name>. This will remove the file from the staging area and the repository, but it will remain in your working directory and can still be edited. The git rm <file_name> command will remove the file from both the working directory and the repository, while the rm command will only remove the file from the working directory.



------------

git diff           ~compares working directory with staging area       


if working directory is clean that means nothing to add then git diff will show nothing


if you modifies a file and then commit without adding modified file then git diff will compare modified file with commited file


git diff --staged                 ~compares staging area with previous commit


-----------------

rename:

if you manually visit to a file for example har.py in your local repo and rename it to Harsh.py  , and you run git status command than it will show har.py deleted and Harsh.py file created  
and then if you add the file to staging area then git will automatically understand that you renamed your file than you just have to commit it inorder to save it in history. 


git rm <file_name>     ~this will remove and also add deleted file in staging area


git mv file.txt renamedfile.txt        ~this will rename file and add renamed file to staging area




-----------


git log -p                ~log with diff

git log -p -3              ~log with last three commits along with their diff


git log --stat            ~show log or commit history in short

git log --pretty=oneline
git log --pretty=short
git log --since=2.days
git log --since=2.months
git log --since=2.weeks
git log --since=2.years 

---------------

To unstage , staged file:

git restore --staged <file_name>

---------

if some file is accidently modified and you want the latest commit version of that file :

git checkout -- <file_name>



git checkout -f     ~return full directory to last commit



git remote add origin git@github.com:harsh-vyas467/Internship-Learnings.git

git remote add origin <url of github repo>

-> Upstream url is from where you forked repository

git remote add upstream <upstream URL>

force push:
git push origin branch_name -f

one branch can only have one pull reques ,Suppose you have created a branch and commited some changes and do the pull request then also done some commits in your local repository and when you push the changes then the changes will be added in the same pull request

So every time you do major or distinguishing changes for forked repository do that in seperate branch So that different pull request can be created and that will make it easyier for the owner to evaluate changes and merge them in main codebase

git reset --hard upstream/main

git pull upstream main



-----------------------------------

Consider if you are an individual working in an organization and want to see some information regarding the commit or to see who else had checked in
specific files. In that case, what command you would use to sort it out?

gitk

---------------------------------
Rename branch 

git branch -m old_branch_name new_branch_name

------------
delete branch

git branch -D branch_name

--------------------------

Git can fail to start a merge for several reasons. Some of the common reasons for Git merge failure include:

Conflicts: If the same lines in a file have been modified in both the source and target branches, Git will fail to automatically merge the changes and will mark the file as conflicted. The user will have to resolve the conflicts manually.

Uncommitted changes: If you have uncommitted changes in your current branch, Git will not allow you to start a merge until those changes are committed or stashed.

Unpulled changes: If the target branch has changes that haven't been pulled into your current branch, Git will fail to start the merge until those changes have been pulled.

Incorrect branch specified: If you specify an incorrect target branch for the merge, Git will fail to start the merge.

Unmergeable branches: If the source and target branches have changes that cannot be automatically merged, Git will fail to start the merge.

In order to resolve Git merge failure, you should first identify the reason for the failure and then take appropriate action, such as committing or stashing changes, pulling changes, specifying the correct target branch, or resolving conflicts manually.


-------------------------------


Git command .................... used to give tags to the specified commit.
The "git tag" command is used to give tags to the specified commit. A tag in Git is a label that is applied to a specific commit, and it can be used to mark a significant point in the history of a Git repository.

To tag a specific commit, you can use the following command:


$ git tag <tag_name> <commit_hash>
where <tag_name> is the name you want to give to the tag, and <commit_hash> is the hash of the commit that you want to tag.

For example, to tag a commit with the hash "1234567" with the tag name "v1.0", you can use the following command:


$ git tag v1.0 1234567
You can then use the "git show" command to view the tag and the associated commit:


$ git show v1.0
This will display the tag, the commit it is associated with, and the commit message and other details for that commit.


------------------

When you do not want to commit changes but do not want to loose them as well then you can save them through git stash and whenever you want them back, fire  git stash pop
to run this command you need to first stage all the changes 

git stash

git stash pop

git stash clear
git stash drop

-------

git branch

git branch -v     ~ returns last commit hash with commit message and currently working branch name


git branch --merged   ~gives already merged branch


git branch --no -merged  ~provides not merged branch


Deleting branches

git branch -d develop    ~gives error if develop is not merged


git branch -D develop      ~gives no error even when branch is not merged


------------
To delete a branch from remote repostiory :

git push -d origin branch_name

-------------

How do you move a commit to the staging area in git?

git reset --soft HEAD~1

